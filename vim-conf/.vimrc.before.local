" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker:

" Trying to get the ALT key functional for binding :
let g:UltiSnipsExpandTrigger="^[/"

" spf13 rewrite {
" enable only those groups :
"let g:spf13_bundle_groups=[
"    \'general', 'writing', 'programming',
"    \'python',
"    \'php', 'ruby', 'javascript', 'html'
"    \'misc',
"    \]
"    \'snipmate',
"    \'youcompleteme',
"    \'neocomplete', 'neocomplcache',

"" disable omni-complete :
let g:spf13_no_omni_complete = 1

" Disable fast tab navigation
let g:spf13_no_fastTabs = 1

" disable easy windows because personalized with alt key in .vimrc.local:
let g:spf13_no_easyWindows = 1

" see for patching terminal fonts :
" https://powerline.readthedocs.org/en/latest/installation/linux.html#font-installation
let g:airline_powerline_fonts=1

"}

" Disable indent highlighting
let g:indent_guides_enable_on_vim_startup=0
let g:indent_guides_auto_colors = 0

" Completion Plugin : {
" Set minimum syntax keyword length.
"let g:neocomplete#sources#syntax#min_keyword_length = 3
"" AutoComplPop like behavior.
let g:neocomplete#enable_auto_select = 1
" Enable omni completion.
"autocmd FileType python setlocal omnifunc=pythoncomplete#Complete

" NCM (Neo Complete Manager) :
let g:UltiSnipsExpandTrigger = "<Plug>(ultisnips_expand)"
let g:UltiSnipsJumpForwardTrigger = "<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<c-k>"
let g:UltiSnipsRemoveSelectModeMappings = 0

"}

" Disable auto-pairs:
"let b:AutoPairs = {"(": ")"}

" Rainbow plugin : (parenthesis and brackets colored by level)
let g:rainbow_active = 1

" { Status Bar with Airline

" Vim-airline plugin
let g:airline_theme = 'solarized'

"Automatically displays all buffers when there's only one tab open :
let g:airline#extensions#tabline#enabled = 1

" To avoid duplicating infos given by status line :
let g:bufferline_echo = 0

"}

" {Python pymode plugin :
"let g:pymode = 0
"let g:pymode_breakpoint = 0

let g:pymode_options_max_line_length = 79
let g:pymode_indent = 1 " pep8 indent
let g:pymode_folding = 1
let g:pymode_motion = 1

" doc
let g:pymode_doc = 1
let g:pymode_doc_bind = 'K'

" syntax
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_slow_sync = 1 " slower syntax sync

" Disable leader+r to run script
let g:pymode_run = 0

" pymode syntax
let g:pymode_syntax = 1
"let g:pymode_syntax_builtin_objs = g:pymode_syntax_all
"let g:pymode_syntax_builtin_funcs = 1

" Python code checking :
let g:pymode_lint = 1
let g:pymode_lint_on_write = 1
let g:pymode_lint_checkers = ['pep8', 'pyflakes'] " pep8 code checker


let g:pymode_lint_signs = 1
let g:pymode_lint_cwindow = 0
let g:pymode_lint_message = 1

" Code completion :
let g:pymode_rope = 1 " enable rope which is slow
let g:pymode_rope_completion = 1 " enable completion
let g:pymode_rope_lookup_project = 0 " do not lookup in parent directories which is slow
let g:pymode_rope_autoimport = 0
"}

" Jedi {
let g:jedi#completions_command = "<C-Space>"
"let g:popup_on_dot = 0
let g:jedi#use_call_signatures_delay = 10
" disable to jedi completions to use another completion engine
" because jedi is conflicted with pymode and very slow
" it will still keep all other functionalities
let g:jedi#completions_enabled = 0
" }

" Deoplete-jedi {
if has('nvim')
  "let g:python_host_prog = '/nix/store/c0fi9iddqzrwcl83gk99gaigv0ghzd69-python3.6-neovim-0.1.13/lib/python3.6/site-packages/'
  "let g:python3_host_prog = '/nix/store/6h7k2zv8w7dirj98dx58xkg8w2waqdi1-python2.7-neovim-0.1.13/lib/python2.7/site-packages/'
endif
" }

" {FastFold :
let g:python_fold=1
" To avoid z remapping and loosing nowait :
let g:fastfold_fold_movement_commands = []
let g:fastfold_fold_command_suffixes = []
" actualize folds when save :
let g:fastfold_savehook = 1
" }

"{ nvim
if has('nvim')
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#enable_refresh_always = 1 "Deoplete refreshes the candidates automatically
  let g:jedi#completions_enabled = 0
  let g:jedi#auto_vim_configuration = 0
  let g:jedi#smart_auto_mappings = 0
  let g:jedi#show_call_signatures = 0
else
  "let g:deoplete#enable_at_startup = 1
  "let g:deoplete#enable_refresh_always = 1 "Deoplete refreshes the candidates automatically
  "let g:jedi#completions_enabled = 0
  "let g:jedi#auto_vim_configuration = 0
  "let g:jedi#smart_auto_mappings = 0
  "let g:jedi#show_call_signatures = 0
endif
"}
